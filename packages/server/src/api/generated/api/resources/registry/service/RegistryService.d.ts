/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from '../../../../serialization'
import { MirrorfulApi } from '../../../..'
import express from 'express'
export interface RegistryServiceMethods {
  getS3UrlForLibraryUpload(
    req: express.Request<
      {
        orgId: serializers.OrgId.Raw
        libraryId: serializers.LibraryId.Raw
      },
      MirrorfulApi.S3UrlForLibraryUploadResponse,
      never,
      never
    >,
    res: {
      send: (
        responseBody: MirrorfulApi.S3UrlForLibraryUploadResponse
      ) => Promise<void>
      cookie: (
        cookie: string,
        value: string,
        options?: express.CookieOptions
      ) => void
      locals: any
    }
  ): void | Promise<void>
  postS3UrlForLibraryUpload(
    req: express.Request<
      {
        orgId: serializers.OrgId.Raw
        libraryId: serializers.LibraryId.Raw
      },
      MirrorfulApi.S3UrlForLibraryUploadResponse,
      never,
      never
    >,
    res: {
      send: (
        responseBody: MirrorfulApi.S3UrlForLibraryUploadResponse
      ) => Promise<void>
      cookie: (
        cookie: string,
        value: string,
        options?: express.CookieOptions
      ) => void
      locals: any
    }
  ): void | Promise<void>
}
export declare class RegistryService {
  private readonly methods
  private router
  constructor(
    methods: RegistryServiceMethods,
    middleware?: express.RequestHandler[]
  )
  addMiddleware(handler: express.RequestHandler): this
  toRouter(): express.Router
}
