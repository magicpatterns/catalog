/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../../../serialization";
import { MirrorfulApi } from "../../../..";
import express from "express";
export interface StoreServiceMethods {
    getStore(req: express.Request<{
        orgId: serializers.OrgId.Raw;
        storeId: serializers.StoreId.Raw;
    }, MirrorfulApi.MirrorfulStore, never, never>, res: {
        send: (responseBody: MirrorfulApi.MirrorfulStore) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    updateStore(req: express.Request<{
        orgId: serializers.OrgId.Raw;
        storeId: serializers.StoreId.Raw;
    }, MirrorfulApi.MirrorfulStore, MirrorfulApi.MirrorfulStore, never>, res: {
        send: (responseBody: MirrorfulApi.MirrorfulStore) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class StoreService {
    private readonly methods;
    private router;
    constructor(methods: StoreServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
